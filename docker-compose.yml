version: "3.8"

services:
# --------------------------USERS-------------------------------
  api_user:
    container_name: api_user
    restart: always
    build: ./users
    ports:
      - "3000:3000"
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=user_db
      - DB_PORT=5432
      - DB_NAME=user_db
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - user_net
      - app_net

  user_db:
    container_name: user_db
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    networks:
      - user_net
    volumes:
      - ./pgdata-user:/var/lib/postgresql/data/
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

# --------------------------ROUTES-------------------------------
  api_routes:
    container_name: api_route
    restart: always
    build: ./routes
    ports:
      - "3002:3002"
    environment:
      DB_NAME: route_db
      DB_HOST: route_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      USERS_PATH: "http://localhost:3000"
    depends_on:
      route_db:
        condition: service_healthy
    networks:
      - route_net
      - app_net

  route_db:
    container_name: route_db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=route_db
    networks:
      - route_net
    volumes:
      - ./pgdata-route:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

# --------------------------OFFERS-------------------------------
  api_offer:
    container_name: api_offer
    image: api_offer
    restart: always
    build: ./offers
    ports:
      - "3003:3003"
    volumes:
      - /usr/src/app
    environment:
      DB_NAME: offer_db
      DB_HOST: offer_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      USERS_PATH: "http://localhost:3000"
    depends_on:
      offer_db:
        condition: service_healthy
    networks:
      - offer_net
      - app_net

  offer_db:
    container_name: offer_db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=offer_db
    networks:
      - offer_net
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

# --------------------------POSTS-------------------------------
  posts:
    container_name: api_posts
    image: api_posts
    build: ./posts
    ports:
      - "3001:3001"
    environment:
      DB_NAME: monitor_posts
      DB_HOST: posts_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      USERS_PATH: "http://localhost:3000"
    depends_on:
      posts_db:
        condition: service_healthy
    networks:
      - app_net
      - post_net
  
  posts_db:
    container_name: posts_db
    image: postgres
    environment:
      POSTGRES_DB: monitor_posts
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5
    networks:
      - post_net
    volumes:
      - ./pgdata-post:/var/lib/postgresql/data/
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

# -------------------------- RF-003 -------------------------------
  api_rf003:
    container_name: api_rf003
    image: api_rf003
    build: ./rf003
    ports:
      - "3004:3004"
    environment:
      DB_NAME: rf003_db
      DB_HOST: rf003_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      USERS_PATH: "http://localhost:3000"
    depends_on:
      rf003_db:
        condition: service_healthy
    networks:
      - app_net
      - post_net
  
  rf003_db:
    container_name: rf003_db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rf003_db
    networks:
      - rf003_net
    volumes:
      - ./pgdata-rf003:/var/lib/postgresql/data/
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

# --------------------------NETWORKS-------------------------------
networks:
  app_net:
    driver: bridge
  user_net:
    driver: bridge
  post_net:
    driver: bridge
  route_net:
    driver: bridge
  offer_net:
    driver: bridge
  rf003_net:
    driver: bridge
